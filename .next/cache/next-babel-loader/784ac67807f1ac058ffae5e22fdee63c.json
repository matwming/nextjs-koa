{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport { createStore, compose, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nconst initialState = {\n  count: 0,\n  username: \"ming\"\n};\n\nconst logger = store => next => action => {\n  if (typeof action === \"function\") {\n    console.log(\"dispatching a function\");\n  } else {\n    console.log(\"dispatching an action\", action);\n  }\n\n  const result = next(action);\n  console.log(\"nextState\", store.getState());\n};\n\nconst addAsync = value => {\n  console.log(\"addAsync is triggered\", value);\n  return dispatch => {\n    setTimeout(() => {\n      dispatch({\n        type: \"add\",\n        payload: value\n      });\n    }, 1500);\n  };\n};\n\nconst reducer = (state = {}, action) => {\n  switch (action.type) {\n    case \"add\":\n      return _objectSpread({}, state, {\n        count: state.count + action.payload\n      });\n\n    case \"update_name\":\n      return _objectSpread({}, state, {\n        username: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default function initializeStore(state) {\n  const store = createStore(reducer, _Object$assign({}, initialState, state), composeWithDevTools(applyMiddleware(logger, thunk)));\n  store.subscribe(() => {\n    console.log(\"changed\", store.getState());\n  });\n  addAsync(2);\n  store.dispatch({\n    type: \"add\",\n    payload: 5\n  });\n  return store;\n}","map":{"version":3,"sources":["/Users/bmyg/Desktop/nextjs/store/store.js"],"names":["createStore","compose","applyMiddleware","thunk","composeWithDevTools","initialState","count","username","logger","store","next","action","console","log","result","getState","addAsync","value","dispatch","setTimeout","type","payload","reducer","state","initializeStore","subscribe"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,QAAsD,OAAtD;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,CADY;AAEnBC,EAAAA,QAAQ,EAAE;AAFS,CAArB;;AAKA,MAAMC,MAAM,GAAGC,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AACxC,MAAI,OAAOA,MAAP,KAAkB,UAAtB,EAAkC;AAChCC,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACD,GAFD,MAEO;AACLD,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCF,MAArC;AACD;;AACD,QAAMG,MAAM,GAAGJ,IAAI,CAACC,MAAD,CAAnB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBJ,KAAK,CAACM,QAAN,EAAzB;AACD,CARD;;AASA,MAAMC,QAAQ,GAAGC,KAAK,IAAI;AACxBL,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCI,KAArC;AACA,SAAOC,QAAQ,IAAI;AACjBC,IAAAA,UAAU,CAAC,MAAM;AACfD,MAAAA,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAE,KADC;AAEPC,QAAAA,OAAO,EAAEJ;AAFF,OAAD,CAAR;AAID,KALS,EAKP,IALO,CAAV;AAMD,GAPD;AAQD,CAVD;;AAWA,MAAMK,OAAO,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaZ,MAAb,KAAwB;AACtC,UAAQA,MAAM,CAACS,IAAf;AACE,SAAK,KAAL;AACE,+BACKG,KADL;AAEEjB,QAAAA,KAAK,EAAEiB,KAAK,CAACjB,KAAN,GAAcK,MAAM,CAACU;AAF9B;;AAIF,SAAK,aAAL;AACE,+BACKE,KADL;AAEEhB,QAAAA,QAAQ,EAAEI,MAAM,CAACU;AAFnB;;AAIF;AACE,aAAOE,KAAP;AAZJ;AAcD,CAfD;;AAiBA,eAAe,SAASC,eAAT,CAAyBD,KAAzB,EAAgC;AAC7C,QAAMd,KAAK,GAAGT,WAAW,CACvBsB,OADuB,EAEvB,eAAc,EAAd,EAAkBjB,YAAlB,EAAgCkB,KAAhC,CAFuB,EAGvBnB,mBAAmB,CAACF,eAAe,CAACM,MAAD,EAASL,KAAT,CAAhB,CAHI,CAAzB;AAKAM,EAAAA,KAAK,CAACgB,SAAN,CAAgB,MAAM;AACpBb,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBJ,KAAK,CAACM,QAAN,EAAvB;AACD,GAFD;AAGAC,EAAAA,QAAQ,CAAC,CAAD,CAAR;AACAP,EAAAA,KAAK,CAACS,QAAN,CAAe;AAAEE,IAAAA,IAAI,EAAE,KAAR;AAAeC,IAAAA,OAAO,EAAE;AAAxB,GAAf;AACA,SAAOZ,KAAP;AACD","sourcesContent":["import { createStore, compose, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nconst initialState = {\n  count: 0,\n  username: \"ming\"\n};\n\nconst logger = store => next => action => {\n  if (typeof action === \"function\") {\n    console.log(\"dispatching a function\");\n  } else {\n    console.log(\"dispatching an action\", action);\n  }\n  const result = next(action);\n  console.log(\"nextState\", store.getState());\n};\nconst addAsync = value => {\n  console.log(\"addAsync is triggered\", value);\n  return dispatch => {\n    setTimeout(() => {\n      dispatch({\n        type: \"add\",\n        payload: value\n      });\n    }, 1500);\n  };\n};\nconst reducer = (state = {}, action) => {\n  switch (action.type) {\n    case \"add\":\n      return {\n        ...state,\n        count: state.count + action.payload\n      };\n    case \"update_name\":\n      return {\n        ...state,\n        username: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nexport default function initializeStore(state) {\n  const store = createStore(\n    reducer,\n    Object.assign({}, initialState, state),\n    composeWithDevTools(applyMiddleware(logger, thunk))\n  );\n  store.subscribe(() => {\n    console.log(\"changed\", store.getState());\n  });\n  addAsync(2);\n  store.dispatch({ type: \"add\", payload: 5 });\n  return store;\n}\n"]},"metadata":{},"sourceType":"module"}